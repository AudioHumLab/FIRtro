; FIRtro 2.0a
; - Gestión de tarjetas de sonido: del sistema y externas al sistema (remuestreadas)
; - Posibilidad de declarar puertos de jack para monitor de la fuente
; - Preset por defecto al arranque (opcional)
; - Uso de Ecasound opcional para el módulo de EQ paramétrico.
; 2.0b
; - nuevas opciones, resaltado de las subsecciones en path

[misc]

; -- Retardo entre órdenes en segundos
command_delay = .5
; -- Opciones de la orden "beep" para indicar carga del FIRtro
beep_options = 

; -- Usar LCD externo (requiere servicio LCDproc accesible))
enable_lcd = False
; tiempo de presentacion de informaciones temporales
lcd_info_timeout = 1
; opcion de presentacion LCD (consultar con "bin/server_lcdproc.py -h" )
lcd_layout = 1

; -- Tope de ganancia (dB) admitada en Brutefir.
gmax = 0
; -- Tonos a cero en el arranque (True/False)
tone_defeat_on_startup  = True
; -- Volumen al encendido (opcional o dejar en blanco)
level_on_startup        = -30
; -- Volumen maximo al encendido (opcional o dejar en blanco)
max_level_on_startup    =

; -- Declaracion de puertos dummy:
dummy_ports: dummy:null_0 dummy:null_1

; Pausar players integrados si no son la input seleccionada (ahorro de %CPU):
pause_players = False
resume_players = False

; --- MONITORES DE SEÑAL (opcionales dejar en blanco si no se usan)
; --- El selector de entradas conectara la fuente seleccionada también aquí
; - monitores "INTERNOS" (puertos de la tarjeta principal o SW presente en jack)
;jack_internal_monitors = ebumeter:in.L ebumeter:in.R JackTrip:send_1 JackTrip:send_2
jack_internal_monitors = 
; - monitores "EXTERNOS" (tarjetas de sonido diferentes de la principal):
;jack_external_monitors = PCH:playback_1 PCH:playback_2
jack_external_monitors = 

[speakers]

loudspeaker = ejemplo2vias

[presets]

; -- Preset por defecto al arranque (opcional)
default_preset = plano

[cards]

; -- Tarjeta del sistem, la que arranca JACK:
; (identidicador ALSA completo hw:Tarjeta,Device)
system_card = hw:0,0
; -- Tarjeta adicionales 'externas' a JACK que se conectarán con resampling:
external_cards = 
;external_cards = hw:miniStreamer,0
; -- Programa de resampling para conectar a JACK las tarjetas externas: alsa | zita
resampler = alsa
; -- Calidad del resampling (opcional) (0..4 para alsa, 16..96 para zita)
resamplingQ =3

[path]

; ---- SERVIDORES: ----

; -- CONTROL SERVER -- Obligatorio
control_path = /home/firtro/bin/server.py
; salida en pantalla: 0 (Nada) - 1 (Minino) - 2 (Completo)
control_output = 2
; borrado de pantalla entre ordenes: True - False
control_clear = False

; -- CALCULO DE EQ DEL SISTEMA -- Obligatorio
syseq_path = /home/firtro/bin/syseq.py

; -- JACK -- Obligatorio
jack_path = /usr/bin/jackd
; -- Opciones de Jack.
;    NOTA: omitir la tarjeta y la fs (se gestionada en initfirtro.py segun la system_card indicada arriba)
; - opciones para usar Jack sobre ALSA: 
;jack_options = -R -dalsa -p1024
; - opciones para usar Jack sobre DUMMY (tarjeta virtual de pruebas):
jack_options = -R -ddummy -P8 -C2

; -- BRUTEFIR -- Obligatorio
brutefir_path = /usr/bin/brutefir
; Para opciones ver https://www.ludd.ltu.se/~torger/brutefir.html#config
brutefir_options =
brutefir_ports = brutefir:input-0 brutefir:input-1

; -- ECASOUND -- Opcional
load_ecasound = False
ecasound_path = /usr/bin/ecasound
; Indicar el numero NN de filtros paramétricos:
; (se necesita plantilla PEQxNN_defeat_Fs.ecs en ~/audio)
ecasound_filters = 16
ecasound_ports = ecasound:in_1 ecasound:in_2
; NOTA: initfirtro.py cargará Ecasound en modo server tcpip y se le pasa un archivo de configuración con
;       -->-- entradas abiertas -->-- plugins de EQ -->-- salidas a Brutefir 

; ---- FUENTES: ----

; -- MPD -- Opcional
load_mpd = False
mpd_path = /usr/bin/mpd
mpd_options = 
; El volumen de MPD puede gobernar el volumen de FIRtro (OjO en fase BETA):
mpd_volume_linked2firtro = False
mpd_volume_slider_range = 30

; -- MPLAYER -- Opcional (se carga una instancia por cada servicio cdda y/o tdt)
mplayer_path = /usr/bin/mplayer
load_mplayer_cdda = False
load_mplayer_tdt  = False
; -- Opciones: -quiet para ver como cambia de canal, -really-quiet para no ver nada, -nolirc desactiva Lirc:
mplayer_options = -quiet -nolirc

; -- SHAIRPORT -- Opcional (FIRtro como altavoz AirPlay)
load_shairport = False
; Ejemplo de path para ejecutable compilado a mano:
;shairport_path = /usr/local/bin/shairport
; Ejemplo de path para programa instalado con apt Debian
shairport_path = shairport-sync
; Ejemplo de opciones para salida por Pulseaudio (con shairport-sync indicar '-o pa')
; shairport_options = -a FirtroSalon -o pulse
; Ejemplo de opciones para salida por ALSA
shairport_options = -a FirtroSalon -o alsa -- -d jack

; -- SQUEEZESLAVE --  Opcional
load_squeezeslave = False
squeezeslave_path = /home/firtro/.squeezeslave/squeezeslave
squeezeslave_options = -F -R -M/home/firtro/.squeezeslave/squeezeslave.log

; -- MOPIDY -- Opcional (A music server which can play music from Spotify and from your local hard drive)
load_mopidy = False
mopidy_path = /usr/bin/mopidy
mopidy_options = 

; -- NETJACK -- Opcional
load_netjack = False
; --- netjack2 (es la opción preferida):
netjack_path = jack_load
netjack_options = netmanager
; --- netjack1 (alternativa)
;netjack_path = jack_netsource
;netjack_options = -H mbp.local

; -- JACKTRIP -- Opcional
load_jacktrip = False
; IMPORTANTE instalar la última versión JackTrip de GitHub (ver Guia del Usuario)
jacktrip_path = /usr/bin/jacktrip
; options: -s (server mode) / -c serverHostName (client mode)
jacktrip_options = -c rpi2fir -r 2 --nojackportsconnect

; ---- CONTROL: ----

; -- LIRC -- Opcional (control de FIRtro por IR)
load_irexec = False
irexec_path = /usr/bin/irexec
irexec_options = -d

; -- DISPLAY de MPD en el LCD -- Opcional                                       
; https://pypi.python.org/pypi/mpdlcd
load_mpdlcd = False
mpdlcd_path = /usr/local/bin/mpdlcd
mpdlcd_options =

[net]
;-- dirección IP del FIRtro
ip_address = 192.168.1.94

;-- dirección y puerto de la interfaz de brutefir
bfcli_address = 127.0.0.1
bfcli_port = 3000

;-- dirección y puerto del script de control.
;0.0.0.0 escucha en todos los interfaces de red
;127.0.0.1 escucha solo conexiones locales
control_address = 0.0.0.0
control_port = 9999

[equalizer]
;Nombres del archivo de frecuencias, curvas de loudnes, tonos
; frequencies = R20-freq.dat
frequencies = R20_ext-freq.dat
; loudness_mag_curves = R20-loudness_mag.dat
loudness_mag_curves = R20_ext-loudness_mag.dat
; loudness_pha_curves = R20-loudness_pha.dat
loudness_pha_curves = R20_ext-loudness_pha.dat
; treble_mag_curves = R20-treble_mag.dat
treble_mag_curves = R20_ext-treble_mag.dat
; treble_pha_curves = R20-treble_pha.dat
treble_pha_curves = R20_ext-treble_pha.dat
; bass_mag_curves = R20-bass_mag.dat
bass_mag_curves = R20_ext-bass_mag.dat
; bass_pha_curves = R20-bass_pha.dat
bass_pha_curves = R20_ext-bass_pha.dat
; syseq_mag_curve = R20-syseq_mag.dat
syseq_mag_curve = R20_ext-syseq_mag.dat
; syseq_pha_curve = R20-syseq_pha.dat
syseq_pha_curve = R20_ext-syseq_pha.dat

; Salto entre curvas de ecualización (dB)
; Ojo: No está implementado en el programa de control.
; Se da como indicación que debe asumirse.
step = 1
loudness_SPLref = 83
loudness_SPLmax = 90
loudness_SPLmin = 70
tone_variation = 6
loudness_variation = 10
balance_variation = 6
no_phase_xo = lp
